{"codeFragments":[{"label":"crypto","content":"const crypto = require('crypto');\n\nconst md5Hash = crypto.createHash('md5').update('Hello World!').digest('hex');\nconst sha1Hash = crypto.createHash('sha1').update('Hello World!').digest('hex');\n\nconsole.log(md5Hash);\nconsole.log(sha1Hash);\n"},{"label":"file operations sync","content":"const fs = require('fs');\n\nfs.writeFileSync('./foo', 'adrakadabra adrakadabra adrakadabra');\n\nconsole.log(fs.readFileSync('./foo').toString());\n"},{"label":"file operations by stream","content":"const fs = require('fs');\n\nconst writeStreamToFileBar = fs.createWriteStream('./bar');\nconst readStreamFromFileFoo = fs.createReadStream('./foo');\nreadStreamFromFileFoo.on('data', (data) => {\n  console.log(data.toString());\n});\n\nreadStreamFromFileFoo.pipe(writeStreamToFileBar);\n"},{"label":"stream read","content":"const { Readable } = require('stream');\n\nconst r_s = new Readable({ read: () => {} });\n\nr_s.pipe(process.stdout);\n\nr_s.push('ping!'); // ping!\nr_s.push('pong!'); // pong!\n"},{"label":"stream read and write to log","content":"const { Readable, Writable } = require('stream');\n\nconst r_s = new Readable({ read: () => {} });\nconst w_s = new Writable({\n  write: (chunk, encoding, callback) => {\n    console.log(chunk.toString());\n    callback();\n  }\n});\n\nr_s.pipe(w_s);\n\nr_s.push('ping!'); // ping!\nr_s.push('pong!'); // pong!\n"},{"label":"stream read and write to file","content":"const { Readable, Writable } = require('stream');\nconst fs = require('fs');\n\nconst r_s = new Readable({ read: () => {} });\nconst w_s = new Writable({\n  write: (chunk, encoding, callback) => {\n    fs.appendFileSync('./new_file', `${chunk.toString()}\\n`);\n    callback();\n  }\n});\n\nr_s.pipe(w_s);\n\nr_s.push('ping!');\nr_s.push('pong!');\n\nfs.createReadStream('./new_file').pipe(process.stdout); // ping!\\npong!\\n\n"},{"label":"simple http server","content":"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  switch (req.url) {\n    case '/user':\n      res.end(JSON.stringify({ msg: 'List of users' }));\n      break;\n    case '/admin':\n      res.end(JSON.stringify({ msg: 'List of admins' }));\n      break;\n    default:\n      res.end(JSON.stringify({ msg: 'Not Found' }));\n      break;\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"http server with method","content":"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  switch (true) {\n    case req.url === '/user' && req.method === 'GET':\n      res.end(JSON.stringify({ msg: 'List of users' }));\n      break;\n    case req.url === '/user' && req.method === 'POST':\n      res.end(JSON.stringify({ msg: 'Create user' }));\n      break;\n    case req.url === '/admin' && req.method === 'GET':\n      res.end(JSON.stringify({ msg: 'List of admins' }));\n      break;\n    default:\n      res.end(JSON.stringify({ msg: 'Not Found' }));\n      break;\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"http server with body","content":"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  let body = '';\n  req\n    .on('data', (chunk) => {\n      body = body + chunk.toString();\n    })\n    .on('end', () => {\n      body = JSON.parse(body);\n      switch (true) {\n        case req.url === '/user' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of users' }));\n          break;\n        case req.url === '/user' && req.method === 'POST':\n          res.end(JSON.stringify({ msg: `Create user with data ${JSON.stringify(body)}` }));\n          break;\n        case req.url === '/admin' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of admins' }));\n          break;\n        default:\n          res.end(JSON.stringify({ msg: 'Not Found' }));\n          break;\n      }\n    });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"event emitter example","content":"const EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\n\nemitter.on('createPost', (userId) => {\n  console.log(`Create a post for user with ${userId} id`);\n});\n\nemitter.on('createUser', (withPost) => {\n  console.log(`Create a user`);\n  if (withPost) {\n    emitter.emit('createPost', 12);\n  }\n});\n\nemitter.emit('createUser', true);\n\nmodule.exports = { emitter };\n"},{"label":"event emitter async","content":"const EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\n\nemitter.on('createPost', (userId) => {\n  setTimeout(() => {\n    console.log(`Create a post for user with ${userId} id`);\n  }, 1000);\n});\n\nemitter.on('createUser', (withPost) => {\n  console.log(`Create a user`);\n  if (withPost) {\n    emitter.emit('createPost', 12);\n  }\n  console.log('User created!');\n});\n\nemitter.emit('createUser', true);\n\nmodule.exports = { emitter };\n"},{"label":"final server with emmiter","content":"const http = require('http');\nconst { emitter } = require('./event');\n\nconst server = http.createServer((req, res) => {\n  let body = '';\n  req\n    .on('data', (chunk) => {\n      body = body + chunk.toString();\n    })\n    .on('end', () => {\n      body = JSON.parse(body);\n      switch (true) {\n        case req.url === '/user' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of users' }));\n          break;\n        case req.url === '/user' && req.method === 'POST':\n          console.log('User created');\n          emitter.emit('createPost', 13);\n          res.end(JSON.stringify({ msg: `Create user with data ${JSON.stringify(body)}` }));\n          break;\n        case req.url === '/admin' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of admins' }));\n          break;\n        default:\n          res.end(JSON.stringify({ msg: 'Not Found' }));\n          break;\n      }\n    });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"process 1","content":"const { fork } = require('child_process');\r\n\r\nconst childProcess = fork('./process2.js');\r\n\r\nsetTimeout(() => {\r\n  console.log('First process ends itself');\r\n}, 1500);\r\n"},{"label":"process 1 with process.on","content":"const { fork } = require('child_process');\r\n\r\nconst childProcess = fork('./process2.js');\r\n\r\nchildProcess.on('message', (msg) => {\r\n  console.log(msg);\r\n});"},{"label":"process 2","content":"setTimeout(() => {\n  console.log('Second process ends itself');\n}, 2000);\n"},{"label":"process2 with process.send","content":"setTimeout(() => {\r\n  process.send({ itIsMyKey: 'it is my value' });\r\n}, 2000);\r\n"},{"label":"first type of app.js for express app","content":"const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst { routes: mainRouting } = require('./routers');\nconst { routes: userRouting } = require('./routers/user');\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.use(mainRouting); // '/'\napp.use('/user', userRouting);\n\napp.use((req, res, next) => {\n  res.status(404).send({ msg: 'Page Not Found' });\n});\n\napp.use((err, req, res, next) => {\n  res.status(400).send({ error: err });\n});\n\napp.listen(3000, () => {\n  console.log('Running on port 3000...');\n});\n"},{"label":"basic user.js router","content":"const routes = require('express').Router();\n\nroutes.get('/', (req, res, next) => {\n  res.status(200).send({ msg: 'main user page' });\n});\n\nmodule.exports = { routes };\n"},{"label":"main basic router (for index.js)","content":"const routes = require('express').Router();\n\nroutes.get('/', (req, res, next) => {\n  res.status(200).send({ msg: 'main page' });\n});\n\nroutes.get('/:urlParam', (req, res, next) => {\n  res.status(200).send({ msg: `Url param is ${req.params.urlParam}` });\n});\n\nroutes.post('/', (req, res, next) => {\n  res.status(201).send({ msg: 'this is post' });\n});\n\nroutes.put('/', (req, res, next) => {\n  res.status(200).send({ msg: 'this is put' });\n});\n\nroutes.delete('/', (req, res, next) => {\n  res.status(200).send({ msg: 'this is delete' });\n});\n\nmodule.exports = { routes };\n"},{"label":"basic user.js with middleware","content":"const routes = require('express').Router();\n\nconst { checkToken } = require('../helper/middleware');\n\nroutes.get('/', checkToken, (req, res, next) => {\n  res.status(200).send({ msg: 'main user page' });\n});\n\nmodule.exports = { routes };\n"},{"label":"finish middleware.js file","content":"const checkToken = (req, res, next) => {\n  if (req.headers.autorization && req.headers.autorization !== '') {\n    return next();\n  }\n  return next('You have to provider a token');\n};\n\nmodule.exports = { checkToken };\n"},{"label":"db config","content":"const { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize({\n  database: 'training_db',\n  dialect: 'mssql',\n  host: 'localhost', // docker\n  port: '1433', // docker\n  username: 'sa', // docker\n  password: 'ADMIN1!1!1!1root', // docker\n  models: [`${__dirname}/models`], // for migration\n  pool: {\n    min: 0,\n    max: 5,\n    acquire: 5000,\n    idle: 10000\n  }\n});\n\nmodule.exports = { db: sequelize };\n"},{"label":"Computer Model","content":"const Sequelize = require('sequelize');\nconst { db } = require('../helper/database');\n\nconst Computer = db.define('Computer', {\n  number: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  type: {\n    type: Sequelize.ENUM('develop', 'testing', 'hosting'),\n    allowNull: false\n  }\n});\n\nmodule.exports = { Computer };\n"},{"label":"User Model","content":"const Sequelize = require('sequelize');\r\nconst { db } = require('../helper/database');\r\nconst { Computer } = require('./Comp');\r\n\r\nconst User = db.define('Users', {\r\n  name: {\r\n    type: Sequelize.STRING,\r\n    allowNull: false\r\n  },\r\n  age: {\r\n    type: Sequelize.INTEGER,\r\n    allowNull: false\r\n  },\r\n  gender: {\r\n    type: Sequelize.ENUM('male', 'female'),\r\n    allowNull: false\r\n  }\r\n});\r\n\r\nUser.hasOne(Computer, { onDelete: 'CASCADE', foreignKey: { allowNull: false } });\r\n\r\nmodule.exports = { User };\r\n"},{"label":"find operators in users.js","content":"routes.get('/raw', checkToken, async (req, res, next) => {\n  const users = await User.findAll();\n  res.status(200).send({ data: users });\n});\n\nroutes.get('/all', checkToken, async (req, res, next) => {\n  const users = await User.findAll({\n    include: Computer\n  });\n  res.status(200).send({ data: users });\n});\n"},{"label":"create endpoint for user.js","content":"routes.post('/', checkToken, async (req, res, next) => {\n  try {\n    const { name, age, gender, compNum } = req.body;\n    await User.create(\n      { name, age, gender, Computer: { number: compNum, type: 'develop' } },\n      { transaction: t, include: [Computer] }\n    );\n    const userRes = await User.findOne({\n      where: { id: createdUserId },\n      include: Computer,\n      transaction: t\n    });\n    res.status(201).send({ data: userRes });\n  } catch (e) {\n    return next(e);\n  }\n});"},{"label":"update endpoint in user.js","content":"routes.put('/comp/:compId', checkToken, async (req, res, next) => {\n  try {\n    const compId = req.params.compId;\n    const { type, compNum } = req.body;\n    await Computer.update({ id: compId }, { number: compNum, type }, { transaction: t });\n    const userWithUpdatedComp = await User.findOne({\n      where: {},\n      include: {\n        model: Computer,\n        where: { id: compId }\n      },\n      transaction: t\n    });\n    res.status(200).send({ data: userWithUpdatedComp });\n  } catch (e) {\n    return next(e);\n  }\n});"},{"label":"delete endpoint in user.js","content":"routes.delete('/:userId', checkToken, async (req, res, next) => {\n  try {\n    const userId = req.params.userId;\n    const user = await User.findOne({\n      where: { id: userId },\n      include: Computer,\n      transaction: t\n    });\n    await User.destroy({ id: userId }, { transaction: t });\n    res.status(200).send({ data: user });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"delete end with transaction in user.js","content":"routes.delete('/:userId', checkToken, async (req, res, next) => {\n  try {\n    const deletedUser = await db.transaction(async (t) => {\n      const userId = req.params.userId;\n      const user = await User.findOne({\n        where: { id: userId },\n        include: Computer,\n        transaction: t\n      });\n      await User.destroy({ id: userId }, { transaction: t });\n      return user;\n    });\n    res.status(200).send({ data: deletedUser });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"update end with transaction in user.js","content":"routes.put('/comp/:compId', checkToken, async (req, res, next) => {\n  try {\n    const userWithUpdatedComp = await db.transaction(async (t) => {\n      const compId = req.params.compId;\n      const { type, compNum } = req.body;\n      await Computer.update({ id: compId }, { number: compNum, type }, { transaction: t });\n      return await User.findOne({\n        where: {},\n        include: {\n          model: Computer,\n          where: { id: compId }\n        },\n        transaction: t\n      });\n    });\n    res.status(200).send({ data: userWithUpdatedComp });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"create end with transaction in user.js","content":"routes.post('/', checkToken, async (req, res, next) => {\n  try {\n    const userRes = await db.transaction(async (t) => {\n      const { name, age, gender, compNum } = req.body;\n      await User.create(\n        { name, age, gender, Computer: { number: compNum, type: 'develop' } },\n        { transaction: t, include: [Computer] }\n      );\n      return await User.findOne({\n        where: { id: createdUserId },\n        include: Computer,\n        transaction: t\n      });\n    });\n    res.status(201).send({ data: userRes });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"final user.js router","content":"const routes = require('express').Router();\n\nconst { checkToken } = require('../helper/middleware');\nconst { Computer } = require('../models/Comp');\nconst { User } = require('../models/Users');\nconst { db } = require('../helper/database');\n\nroutes.get('/', checkToken, (req, res, next) => {\n  res.status(200).send({ msg: 'main user page' });\n});\n\nroutes.post('/', checkToken, async (req, res, next) => {\n  try {\n    const userRes = await db.transaction(async (t) => {\n      const { name, age, gender, compNum } = req.body;\n      await User.create(\n        { name, age, gender, Computer: { number: compNum, type: 'develop' } },\n        { transaction: t, include: [Computer] }\n      );\n      return await User.findOne({\n        where: { id: createdUserId },\n        include: Computer,\n        transaction: t\n      });\n    });\n    res.status(201).send({ data: userRes });\n  } catch (e) {\n    return next(e);\n  }\n});\n\nroutes.put('/comp/:compId', checkToken, async (req, res, next) => {\n  try {\n    const userWithUpdatedComp = await db.transaction(async (t) => {\n      const compId = req.params.compId;\n      const { type, compNum } = req.body;\n      await Computer.update({ id: compId }, { number: compNum, type }, { transaction: t });\n      return await User.findOne({\n        where: {},\n        include: {\n          model: Computer,\n          where: { id: compId }\n        },\n        transaction: t\n      });\n    });\n    res.status(200).send({ data: userWithUpdatedComp });\n  } catch (e) {\n    return next(e);\n  }\n});\n\nroutes.delete('/:userId', checkToken, async (req, res, next) => {\n  try {\n    const deletedUser = await db.transaction(async (t) => {\n      const userId = req.params.userId;\n      const user = await User.findOne({\n        where: { id: userId },\n        include: Computer,\n        transaction: t\n      });\n      await User.destroy({ id: userId }, { transaction: t });\n      return user;\n    });\n    res.status(200).send({ data: deletedUser });\n  } catch (e) {\n    return next(e);\n  }\n});\n\nroutes.get('/raw', checkToken, async (req, res, next) => {\n  const users = await User.findAll();\n  res.status(200).send({ data: users });\n});\n\nroutes.get('/all', checkToken, async (req, res, next) => {\n  const users = await User.findAll({\n    include: Computer\n  });\n  res.status(200).send({ data: users });\n});\n\nmodule.exports = { routes };\n"},{"label":"final app.js for express app","content":"// run in bash\r\n// docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=ADMIN1!1!1!1root' -p 1433:1433 -d mcr.microsoft.com/mssql/server\r\n// CREATE DATABASE training_db;\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst { db } = require('./helper/database');\r\n\r\nconst { routes: mainRouting } = require('./routers');\r\nconst { routes: userRouting } = require('./routers/user');\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.use(mainRouting); // '/'\r\napp.use('/user', userRouting);\r\n\r\napp.use((req, res, next) => {\r\n  res.status(404).send({ msg: 'Page Not Found' });\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n  res.status(400).send({ error: err });\r\n});\r\n\r\ndb.authenticate()\r\n  .then(() => {\r\n    return db.sync();\r\n  })\r\n  .then(() => {\r\n    app.listen(3000, () => {\r\n      console.log('Running on port 3000...');\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n"},{"label":"crypto","content":"const crypto = require('crypto');\n\nconst md5Hash = crypto.createHash('md5').update('Hello World!').digest('hex');\nconst sha1Hash = crypto.createHash('sha1').update('Hello World!').digest('hex');\n\nconsole.log(md5Hash);\nconsole.log(sha1Hash);\n"},{"label":"file operations sync","content":"const fs = require('fs');\n\nfs.writeFileSync('./foo', 'adrakadabra adrakadabra adrakadabra');\n\nconsole.log(fs.readFileSync('./foo').toString());\n"},{"label":"file operations by stream","content":"const fs = require('fs');\n\nconst writeStreamToFileBar = fs.createWriteStream('./bar');\nconst readStreamFromFileFoo = fs.createReadStream('./foo');\nreadStreamFromFileFoo.on('data', (data) => {\n  console.log(data.toString());\n});\n\nreadStreamFromFileFoo.pipe(writeStreamToFileBar);\n"},{"label":"stream read","content":"const { Readable } = require('stream');\n\nconst r_s = new Readable({ read: () => {} });\n\nr_s.pipe(process.stdout);\n\nr_s.push('ping!'); // ping!\nr_s.push('pong!'); // pong!\n"},{"label":"stream read and write to log","content":"const { Readable, Writable } = require('stream');\n\nconst r_s = new Readable({ read: () => {} });\nconst w_s = new Writable({\n  write: (chunk, encoding, callback) => {\n    console.log(chunk.toString());\n    callback();\n  }\n});\n\nr_s.pipe(w_s);\n\nr_s.push('ping!'); // ping!\nr_s.push('pong!'); // pong!\n"},{"label":"stream read and write to file","content":"const { Readable, Writable } = require('stream');\nconst fs = require('fs');\n\nconst r_s = new Readable({ read: () => {} });\nconst w_s = new Writable({\n  write: (chunk, encoding, callback) => {\n    fs.appendFileSync('./new_file', `${chunk.toString()}\\n`);\n    callback();\n  }\n});\n\nr_s.pipe(w_s);\n\nr_s.push('ping!');\nr_s.push('pong!');\n\nfs.createReadStream('./new_file').pipe(process.stdout); // ping!\\npong!\\n\n"},{"label":"simple http server","content":"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  switch (req.url) {\n    case '/user':\n      res.end(JSON.stringify({ msg: 'List of users' }));\n      break;\n    case '/admin':\n      res.end(JSON.stringify({ msg: 'List of admins' }));\n      break;\n    default:\n      res.end(JSON.stringify({ msg: 'Not Found' }));\n      break;\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"http server with method","content":"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  switch (true) {\n    case req.url === '/user' && req.method === 'GET':\n      res.end(JSON.stringify({ msg: 'List of users' }));\n      break;\n    case req.url === '/user' && req.method === 'POST':\n      res.end(JSON.stringify({ msg: 'Create user' }));\n      break;\n    case req.url === '/admin' && req.method === 'GET':\n      res.end(JSON.stringify({ msg: 'List of admins' }));\n      break;\n    default:\n      res.end(JSON.stringify({ msg: 'Not Found' }));\n      break;\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"http server with body","content":"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  let body = '';\n  req\n    .on('data', (chunk) => {\n      body = body + chunk.toString();\n    })\n    .on('end', () => {\n      body = JSON.parse(body);\n      switch (true) {\n        case req.url === '/user' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of users' }));\n          break;\n        case req.url === '/user' && req.method === 'POST':\n          res.end(JSON.stringify({ msg: `Create user with data ${JSON.stringify(body)}` }));\n          break;\n        case req.url === '/admin' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of admins' }));\n          break;\n        default:\n          res.end(JSON.stringify({ msg: 'Not Found' }));\n          break;\n      }\n    });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"event emitter example","content":"const EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\n\nemitter.on('createPost', (userId) => {\n  console.log(`Create a post for user with ${userId} id`);\n});\n\nemitter.on('createUser', (withPost) => {\n  console.log(`Create a user`);\n  if (withPost) {\n    emitter.emit('createPost', 12);\n  }\n});\n\nemitter.emit('createUser', true);\n\nmodule.exports = { emitter };\n"},{"label":"event emitter async","content":"const EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\n\nemitter.on('createPost', (userId) => {\n  setTimeout(() => {\n    console.log(`Create a post for user with ${userId} id`);\n  }, 1000);\n});\n\nemitter.on('createUser', (withPost) => {\n  console.log(`Create a user`);\n  if (withPost) {\n    emitter.emit('createPost', 12);\n  }\n  console.log('User created!');\n});\n\nemitter.emit('createUser', true);\n\nmodule.exports = { emitter };\n"},{"label":"final server with emmiter","content":"const http = require('http');\nconst { emitter } = require('./event');\n\nconst server = http.createServer((req, res) => {\n  let body = '';\n  req\n    .on('data', (chunk) => {\n      body = body + chunk.toString();\n    })\n    .on('end', () => {\n      body = JSON.parse(body);\n      switch (true) {\n        case req.url === '/user' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of users' }));\n          break;\n        case req.url === '/user' && req.method === 'POST':\n          console.log('User created');\n          emitter.emit('createPost', 13);\n          res.end(JSON.stringify({ msg: `Create user with data ${JSON.stringify(body)}` }));\n          break;\n        case req.url === '/admin' && req.method === 'GET':\n          res.end(JSON.stringify({ msg: 'List of admins' }));\n          break;\n        default:\n          res.end(JSON.stringify({ msg: 'Not Found' }));\n          break;\n      }\n    });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000...');\n});\n"},{"label":"process 1","content":"const { fork } = require('child_process');\r\n\r\nconst childProcess = fork('./process2.js');\r\n\r\nsetTimeout(() => {\r\n  console.log('First process ends itself');\r\n}, 1500);\r\n"},{"label":"process 1 with process.on","content":"const { fork } = require('child_process');\r\n\r\nconst childProcess = fork('./process2.js');\r\n\r\nchildProcess.on('message', (msg) => {\r\n  console.log(msg);\r\n});"},{"label":"process 2","content":"setTimeout(() => {\n  console.log('Second process ends itself');\n}, 2000);\n"},{"label":"process2 with process.send","content":"setTimeout(() => {\r\n  process.send({ itIsMyKey: 'it is my value' });\r\n}, 2000);\r\n"},{"label":"first type of app.js for express app","content":"const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst { routes: mainRouting } = require('./routers');\nconst { routes: userRouting } = require('./routers/user');\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.use(mainRouting); // '/'\napp.use('/user', userRouting);\n\napp.use((req, res, next) => {\n  res.status(404).send({ msg: 'Page Not Found' });\n});\n\napp.use((err, req, res, next) => {\n  console.error(err);\n  res.status(400).send({ error: err });\n});\n\napp.listen(3000, () => {\n  console.log('Running on port 3000...');\n});\n"},{"label":"basic user.js router","content":"const routes = require('express').Router();\n\nroutes.get('/', (req, res, next) => {\n  res.status(200).send({ msg: 'main user page' });\n});\n\nmodule.exports = { routes };\n"},{"label":"main basic router (for index.js)","content":"const routes = require('express').Router();\n\nroutes.get('/', (req, res, next) => {\n  res.status(200).send({ msg: 'main page' });\n});\n\nroutes.get('/:urlParam', (req, res, next) => {\n  res.status(200).send({ msg: `Url param is ${req.params.urlParam}` });\n});\n\nroutes.post('/', (req, res, next) => {\n  res.status(201).send({ msg: 'this is post' });\n});\n\nroutes.put('/', (req, res, next) => {\n  res.status(200).send({ msg: 'this is put' });\n});\n\nroutes.delete('/', (req, res, next) => {\n  res.status(200).send({ msg: 'this is delete' });\n});\n\nmodule.exports = { routes };\n"},{"label":"basic user.js with middleware","content":"const routes = require('express').Router();\n\nconst { checkToken } = require('../helper/middleware');\n\nroutes.get('/', checkToken, (req, res, next) => {\n  res.status(200).send({ msg: 'main user page' });\n});\n\nmodule.exports = { routes };\n"},{"label":"finish middleware.js file","content":"const checkToken = (req, res, next) => {\n  if (req.headers.autorization && req.headers.autorization !== '') {\n    return next();\n  }\n  return next('You have to provider a token');\n};\n\nmodule.exports = { checkToken };\n"},{"label":"db config","content":"const { Sequelize } = require('sequelize');\r\n\r\nconst sequelize = new Sequelize({\r\n  database: 'training_db',\r\n  dialect: 'mssql',\r\n  host: 'localhost', // docker\r\n  port: '1433', // docker\r\n  username: 'sa', // docker\r\n  password: 'ADMIN1!1!1!1root', // docker\r\n  pool: {\r\n    min: 0,\r\n    max: 5,\r\n    acquire: 5000,\r\n    idle: 10000\r\n  }\r\n});\r\n\r\nmodule.exports = { db: sequelize };\r\n"},{"label":"Computer Model","content":"const Sequelize = require('sequelize');\nconst { db } = require('../helper/database');\n\nconst Computer = db.define('Computer', {\n  number: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  type: {\n    type: Sequelize.ENUM('develop', 'testing', 'hosting'),\n    allowNull: false\n  }\n});\n\nmodule.exports = { Computer };\n"},{"label":"User Model","content":"const Sequelize = require('sequelize');\r\nconst { db } = require('../helper/database');\r\nconst { Computer } = require('./Comp');\r\n\r\nconst User = db.define('Users', {\r\n  name: {\r\n    type: Sequelize.STRING,\r\n    allowNull: false\r\n  },\r\n  age: {\r\n    type: Sequelize.INTEGER,\r\n    allowNull: false\r\n  },\r\n  gender: {\r\n    type: Sequelize.ENUM('male', 'female'),\r\n    allowNull: false\r\n  }\r\n});\r\n\r\nUser.hasOne(Computer, { onDelete: 'CASCADE', foreignKey: { allowNull: false } });\r\n\r\nmodule.exports = { User };\r\n"},{"label":"find operators in users.js","content":"routes.get('/raw', checkToken, async (req, res, next) => {\n  const users = await User.findAll();\n  res.status(200).send({ data: users });\n});\n\nroutes.get('/all', checkToken, async (req, res, next) => {\n  const users = await User.findAll({\n    include: Computer\n  });\n  res.status(200).send({ data: users });\n});\n"},{"label":"create endpoint for user.js","content":"routes.post('/', checkToken, async (req, res, next) => {\n  try {\n    const { name, age, gender, compNum } = req.body;\n    await User.create(\n      { name, age, gender, Computer: { number: compNum, type: 'develop' } },\n      { transaction: t, include: [Computer] }\n    );\n    const userRes = await User.findOne({\n      where: { id: createdUserId },\n      include: Computer,\n      transaction: t\n    });\n    res.status(201).send({ data: userRes });\n  } catch (e) {\n    return next(e);\n  }\n});"},{"label":"update endpoint in user.js","content":"routes.put('/comp/:compId', checkToken, async (req, res, next) => {\n  try {\n    const compId = req.params.compId;\n    const { type, compNum } = req.body;\n    await Computer.update({ id: compId }, { number: compNum, type }, { transaction: t });\n    const userWithUpdatedComp = await User.findOne({\n      where: {},\n      include: {\n        model: Computer,\n        where: { id: compId }\n      },\n      transaction: t\n    });\n    res.status(200).send({ data: userWithUpdatedComp });\n  } catch (e) {\n    return next(e);\n  }\n});"},{"label":"delete endpoint in user.js","content":"routes.delete('/:userId', checkToken, async (req, res, next) => {\n  try {\n    const userId = req.params.userId;\n    const user = await User.findOne({\n      where: { id: userId },\n      include: Computer,\n      transaction: t\n    });\n    await User.destroy({ id: userId }, { transaction: t });\n    res.status(200).send({ data: user });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"delete end with transaction in user.js","content":"routes.delete('/:userId', checkToken, async (req, res, next) => {\n  try {\n    const deletedUser = await db.transaction(async (t) => {\n      const userId = req.params.userId;\n      const user = await User.findOne({\n        where: { id: userId },\n        include: Computer,\n        transaction: t\n      });\n      await User.destroy({ id: userId }, { transaction: t });\n      return user;\n    });\n    res.status(200).send({ data: deletedUser });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"update end with transaction in user.js","content":"routes.put('/comp/:compId', checkToken, async (req, res, next) => {\n  try {\n    const userWithUpdatedComp = await db.transaction(async (t) => {\n      const compId = req.params.compId;\n      const { type, compNum } = req.body;\n      await Computer.update({ id: compId }, { number: compNum, type }, { transaction: t });\n      return await User.findOne({\n        where: {},\n        include: {\n          model: Computer,\n          where: { id: compId }\n        },\n        transaction: t\n      });\n    });\n    res.status(200).send({ data: userWithUpdatedComp });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"create end with transaction in user.js","content":"routes.post('/', checkToken, async (req, res, next) => {\n  try {\n    const userRes = await db.transaction(async (t) => {\n      const { name, age, gender, compNum } = req.body;\n      await User.create(\n        { name, age, gender, Computer: { number: compNum, type: 'develop' } },\n        { transaction: t, include: [Computer] }\n      );\n      return await User.findOne({\n        where: { id: createdUserId },\n        include: Computer,\n        transaction: t\n      });\n    });\n    res.status(201).send({ data: userRes });\n  } catch (e) {\n    return next(e);\n  }\n});\n"},{"label":"final user.js router","content":"const routes = require('express').Router();\n\nconst { checkToken } = require('../helper/middleware');\nconst { Computer } = require('../models/Comp');\nconst { User } = require('../models/Users');\nconst { db } = require('../helper/database');\n\nroutes.get('/', checkToken, (req, res, next) => {\n  res.status(200).send({ msg: 'main user page' });\n});\n\nroutes.post('/', checkToken, async (req, res, next) => {\n  try {\n    const userRes = await db.transaction(async (t) => {\n      const { name, age, gender, compNum } = req.body;\n      await User.create(\n        { name, age, gender, Computer: { number: compNum, type: 'develop' } },\n        { transaction: t, include: [Computer] }\n      );\n      return await User.findOne({\n        where: { id: createdUserId },\n        include: Computer,\n        transaction: t\n      });\n    });\n    res.status(201).send({ data: userRes });\n  } catch (e) {\n    return next(e);\n  }\n});\n\nroutes.put('/comp/:compId', checkToken, async (req, res, next) => {\n  try {\n    const userWithUpdatedComp = await db.transaction(async (t) => {\n      const compId = req.params.compId;\n      const { type, compNum } = req.body;\n      await Computer.update({ id: compId }, { number: compNum, type }, { transaction: t });\n      return await User.findOne({\n        where: {},\n        include: {\n          model: Computer,\n          where: { id: compId }\n        },\n        transaction: t\n      });\n    });\n    res.status(200).send({ data: userWithUpdatedComp });\n  } catch (e) {\n    return next(e);\n  }\n});\n\nroutes.delete('/:userId', checkToken, async (req, res, next) => {\n  try {\n    const deletedUser = await db.transaction(async (t) => {\n      const userId = req.params.userId;\n      const user = await User.findOne({\n        where: { id: userId },\n        include: Computer,\n        transaction: t\n      });\n      await User.destroy({ id: userId }, { transaction: t });\n      return user;\n    });\n    res.status(200).send({ data: deletedUser });\n  } catch (e) {\n    return next(e);\n  }\n});\n\nroutes.get('/raw', checkToken, async (req, res, next) => {\n  const users = await User.findAll();\n  res.status(200).send({ data: users });\n});\n\nroutes.get('/all', checkToken, async (req, res, next) => {\n  const users = await User.findAll({\n    include: Computer\n  });\n  res.status(200).send({ data: users });\n});\n\nmodule.exports = { routes };\n"},{"label":"final app.js for express app","content":"// run in bash\r\n// docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=ADMIN1!1!1!1root' -p 1433:1433 -d mcr.microsoft.com/mssql/server\r\n// CREATE DATABASE training_db;\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst { db } = require('./helper/database');\r\n\r\nconst { routes: mainRouting } = require('./routers');\r\nconst { routes: userRouting } = require('./routers/user');\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.use(mainRouting); // '/'\r\napp.use('/user', userRouting);\r\n\r\napp.use((req, res, next) => {\r\n  res.status(404).send({ msg: 'Page Not Found' });\r\n});\r\n\r\napp.use((err, req, res, next) => {\n  console.error(err);\r\n  res.status(400).send({ error: err });\r\n});\r\n\r\ndb.authenticate()\r\n  .then(() => {\r\n    return db.sync();\r\n  })\r\n  .then(() => {\r\n    app.listen(3000, () => {\r\n      console.log('Running on port 3000...');\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n"}]}